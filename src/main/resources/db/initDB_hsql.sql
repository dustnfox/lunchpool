DROP TABLE votes
IF EXISTS;
DROP TABLE user_roles
IF EXISTS;
DROP TABLE users
IF EXISTS;
DROP TABLE menu_entries
IF EXISTS;
DROP TABLE restaurants
IF EXISTS;
DROP SEQUENCE global_seq
IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ
  AS INTEGER
  START WITH 100000;


CREATE TABLE restaurants
(
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name        VARCHAR(255)            NOT NULL,
  address     VARCHAR(255),
  description VARCHAR(255),
  enabled     BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX restaurants_unique_name_idx
  ON restaurants (name);


CREATE TABLE menu_entries
(
  id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  rest_id INTEGER                 NOT NULL,
  date    DATE DEFAULT now() NOT NULL,
  price   INTEGER                 NOT NULL,
  name    VARCHAR(255)            NOT NULL,
  enabled BOOLEAN DEFAULT TRUE    NOT NULL,
  FOREIGN KEY (rest_id) REFERENCES restaurants (id)
    ON DELETE CASCADE
);
CREATE UNIQUE INDEX menu_entry_unique_date_rest_name_idx
  ON menu_entries (rest_id, date, name);


CREATE TABLE users
(
  id       INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name     VARCHAR(255)         NOT NULL,
  email    VARCHAR(255)         NOT NULL,
  password VARCHAR(255)         NOT NULL,
  enabled  BOOLEAN DEFAULT TRUE NOT NULL
);
CREATE UNIQUE INDEX user_unique_email_idx
  ON users (email);


CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES users (id)
    ON DELETE CASCADE
);

CREATE TABLE votes
(
  id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  date    DATE    NOT NULL,
  user_id INTEGER NOT NULL,
  rest_id INTEGER NOT NULL,
  CONSTRAINT user_date_idx UNIQUE (date, user_id),
  FOREIGN KEY (user_id) REFERENCES users (id)
    ON DELETE CASCADE,
  FOREIGN KEY (rest_id) REFERENCES restaurants (id)
    ON DELETE CASCADE
);
